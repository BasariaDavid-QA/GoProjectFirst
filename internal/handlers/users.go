// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Message defines model for Message.
type Message struct {
	Id      *uint   `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// User defines model for User.
type User struct {
	Email    *string `json:"email,omitempty"`
	Id       *uint   `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
}

// DeleteMessagesParams defines parameters for DeleteMessages.
type DeleteMessagesParams struct {
	Id uint `form:"id" json:"id"`
}

// PatchMessagesJSONRequestBody defines body for PatchMessages for application/json ContentType.
type PatchMessagesJSONRequestBody = Message

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody = Message

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = User

// PatchUserByIdJSONRequestBody defines body for PatchUserById for application/json ContentType.
type PatchUserByIdJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a message
	// (DELETE /messages)
	DeleteMessages(ctx echo.Context, params DeleteMessagesParams) error
	// Get all messages
	// (GET /messages)
	GetMessages(ctx echo.Context) error
	// Update an existing message
	// (PATCH /messages)
	PatchMessages(ctx echo.Context) error
	// Create a new message
	// (POST /messages)
	PostMessages(ctx echo.Context) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	PostUser(ctx echo.Context) error
	// Delete a user by ID
	// (DELETE /users/{id})
	DeleteUserById(ctx echo.Context, id int) error
	// Update a user by ID
	// (PATCH /users/{id})
	PatchUserById(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteMessages converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMessages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMessagesParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMessages(ctx, params)
	return err
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMessages(ctx)
	return err
}

// PatchMessages converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchMessages(ctx)
	return err
}

// PostMessages converts echo context to params.
func (w *ServerInterfaceWrapper) PostMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMessages(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// DeleteUserById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserById(ctx, id)
	return err
}

// PatchUserById converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUserById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUserById)
	router.PATCH(baseURL+"/users/:id", wrapper.PatchUserById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVT2/bPgz9KgJ/v6NRp9tOvvUPUARDtx7W09CDajGJCltSRXqdEei7D5LtpGnq1FvR",
	"9pLYEim+9/gsrqG0tbMGDRMUa6ByhbVMj5dIJJcYH523Dj1rTBtaxd+F9bVkKKDRhiEDbh1CAdowLtFD",
	"yKDeHtBvEnttlhDCJtze3mHJMfqa0O/Xwlrq6pkTsskonCR6sF5NghGXtFnYFKy5insnV3PI4Bd60tZA",
	"AcdHs6NZPNk6NNJpKOBzWoq1eJVg5z339KKwQk4yRGaStTVzBQWcp/XLITKme1kjoycofq5Bx2r3DfoW",
	"MjCyTsQUZODxvtEeFRTsG8z6pk2RI9zEbHLWUIft0+xLB5FKrx13DHtIgpqyRKJFU1Wt6FiopBo1dS19",
	"u+EgpBianQHLZcQPGwluQgZL5H0BLpAfsX+Caxb/SmsYTUqVzlW6TMn5HUWc60fENWOdEv/3uIAC/su3",
	"vs57U+eDo7d9l97Ltmv7rgQnotLEwi7EhsYu8QtkIatquz1C3EkuV/vUr+LyDvn7BolPrWr/ivckuvv0",
	"fqxQNE5JxoGAUJLlnrfCK9vyanhqY6xd+a878NII/K2JtVm+5EBn6RkLXlnij23DoD9bUXqUjBOacPxe",
	"4DpEY004S7tCCoMPh+UPGeQNpYttPXoXXKeA97gI0qyZcAt8/zry1Tc91IFq937YZqno21is4xPCezpn",
	"W3NXs84U6pBVmk6Jp+JtTJKvtQovT86I4LSdq5HJGYfx5MH5b4PymxVnvZYjYzHyEbetmJ8/75YD0+Ht",
	"6X2kEWdvbsS9j3eYGYebEkL4EwAA//8x9Fx4FQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
